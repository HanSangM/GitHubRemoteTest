<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
  <!-- namespace속성 : 매퍼파일의 완전한경로 .xml는 생략 -->
  <!-- ※ ibatis와는 다르게 id값에 .(dot)을 사용 못한다 -->
<mapper namespace="onememo.mybatis.mapper.onememo">

  	<!-- select한 결과값을 담을때 
  	type에 별칭한 이름 넣는다.
  	사용할땐 id값으로 사용-->
  	<!-- resultMap 사용시 column속성 필수 : ibatis와 다른점 -->
  	<resultMap type="oneMemoDTO" id="oneMemoDTOResult">
  		
  		<!--property : 자바빈(DTO)의 속성명
  			column : 테이블의 컬럼(조회(SELECT)결과의 컬럼명들 의미)
  		  -->
  		  <result column="no" property="no"/>
  		  <result column="title" property="title"/> 
  		  <result column="content" property="content"/> 
  		  <result column="postDate" property="postDate"/>
  		  <result column="id" property="id"/>
  		  <result column="name" property="name"/>
  		  <result column="commentCount" property="commentCount"/> 
  		  <!-- 
  		  1:N 관계 매핑용
  		  column : 조인조건의 컬럼명 (ON onememo.no = linecomments.no)
  		  select : select태그의 id 속성값(쿼리문은 조인문)
  		  javaType : OneMemoDTO 의 자식레코드를 담을 컬렉션 타입
  		  ofType : 자식의 DTO타입
  		  
  		   -->
  		   <collection property="comments" column="no" select="onememo.mybatis.mapper.linecomment.commentListsUsingCollection" javaType="List" ofType="lineCommentDTO"/>
  		   
  	</resultMap> 
  	
  	<!--
	[쿼리문 작성법]
	A. 값에 해당하는 부분은 #{변수}
	B. 객체에 해당하는 부분은 ${변수} 객체은 테이블명 혹은 컬럼명등을 의미
	C. #{변수} 작성시 parameterType이 Map인 경우는 키값을
	                            자바빈(DTO계열)인 경우는 자바빈의 속성명(멤버변수명) 이어야 한다
	     단,parameterType이 int나 String인 경우는 임의값을 줘도 무방
	D. 쿼리문안에  >,>= ,<,<=등의 비교 연산자를 사용하는 경우 에러
	  	1. <![CDATA[     ]]> CDATA섹션을 사용하거나
	  		예]
	  		SELECT * FROM emp
	  		<![CDATA[
	  		WHERE sal >= 3000
	  		]]>
	  		CDATA섹션의 문자열은 단순 텍스트로 처리한다
	  	2. 특수문자를 사용한다 즉 >은 &gt; < 은 &lt;
	  	   예]
	  	  SELECT * FROM emp
	  	  WHERE sal &gt;= 3000
	 -->
  
  	<select id="memoIsLogin" parameterType="Map" resultType="int"> <!--  parameterType="Map" -->
  		SELECT COUNT(*) FROM member WHERE id=#{id} AND pwd=#{pwd} <!-- 실행하면 갯수가 나오니까 resultType = int로 함 -->
  															<!-- #{id} 키값으로 map에서 읽어와서 반환  -->
  	</select>	
  	<select id="memoSelectList" parameterType="Map" resultType="oneMemoDTO"><!-- DTO는 하나만 담을수 있는데 마이바티스 프레임워크가 알아서 여러개 담아준다 -->
  		SELECT * FROM
  		(SELECT T.*,ROWNUM R FROM
  			(SELECT o.*,m.name,(SELECT COUNT(*) FROM linecomments WHERE no=o.no) as commentCount FROM 
  				onememo o JOIN member m ON m.id=o.id 
  				<if test="searchWord !=null">
  					WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'
  				</if>
  				
  				ORDER BY no DESC) T)
  		WHERE R BETWEEN #{start} AND #{end}
  	</select>	
  	<select id="memoTotalRowCount" parameterType="Map" resultType="int"> <!-- 총 개수 만 정하는 거니까 int -->
  		SELECT COUNT(*) FROM onememo o JOIN member m ON m.id=o.id
  		<if test="searchWord !=null">
  			WHERE ${searchColumn} LIKE '%' || #{searchWord} || '%'
  		</if>
  	</select>
  	<insert id="memoInsert" parameterType="Map" >
  		INSERT INTO onememo
  		VALUES(SEQ_ONEMEMO.NEXTVAL,#{title},#{content},SYSDATE,#{id})
  	</insert>
  	<select id="memoSelectOne" parameterType="Map" resultMap="oneMemoDTOResult">
  		SELECT o.*,m.name FROM
  		member m JOIN onememo o ON m.id=o.id
  		WHERE no =#{no}
  	
  	</select>			
  
  	<select id="memoFindNameById" parameterType="String" resultType="String">
  		SELECT name FROM member WHERE id=#{id}
  	</select>
  	
  	<update id="memoUpdate" parameterType="Map">
  		UPDATE onememo SET title=#{title},content=#{content} WHERE no=#{no}
  	</update>
  	
  	<delete id="memoDelete" parameterType="Map">
  		DELETE onememo WHERE no=#{no}
  	</delete>
</mapper>